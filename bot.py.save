		import logging
import time
import json
from turtle import update
import telebot
from telebot import TeleBot, types
from telebot.types import Message

##TOKEN DETAILS
TOKEN = "₹"

BOT_TOKEN = "6754250942:AAFMkN28vPOlaaJfigSBMUTHg5_ucsGxaFE"
PAYMENT_CHANNEL = "@nnanabahgu" #add payment channel here including the '@' sign
OWNER_ID = 6224931837 #write owner's user id here.. get it from @MissRose_Bot by /id
CHANNELS = ["@bigmumbai_goagame_91club"] #add channels to be checked here in the format - ["Channel 1", "Channel 2"] 
              #you can add as many channels here and also add the '@' sign before channel username
Daily_bonus = 0.05 #Put daily bonus amount here!
Mini_Withdraw = 20  #remove 0 and add the minimum withdraw u want to set
Per_Refer = 5 #add per refer bonus here

owner_id = '6224931837'

bot = telebot.TeleBot(BOT_TOKEN)

bot = TeleBot('6754250942:AAFMkN28vPOlaaJfigSBMUTHg5_ucsGxaFE')

operation_state = {}

def load_users():
    """Load the user data from users.json."""
    try:
        with open('users.json', 'r') as file:
            data = json.load(file)
        # Extract all user IDs from the 'checkin' section for messaging
        user_ids = list(data['checkin'].keys())
        return user_ids
    except FileNotFoundError:
        print("Error: 'users.json' file not found.")
        return []
    except json.JSONDecodeError:
        print("Error: 'users.json' file is not valid JSON.")
        return []

@bot.message_handler(commands=['send'])
def handle_send(message):
    if message.from_user.id == OWNER_ID:
        try:
            # Split command text to get user_id
            command_parts = message.text.split(maxsplit=1)
            if len(command_parts) < 2:
                bot.reply_to(message, "Usage: /send <user_id>")
                return
            
            _, user_id = command_parts
            user_id = str(user_id)  # Ensure user_id is a string for consistency
            
            user_ids = load_users()
            if user_id not in user_ids:
                bot.reply_to(message, "User ID not found.")
                return

            # Set operation state to expect the next message content
            operation_state[message.from_user.id] = user_id
            bot.reply_to(message, "Please send the message or media you want to send.")
        
        except Exception as e:
            bot.reply_to(message, f"An error occurred: {str(e)}")
    else:
        bot.reply_to(message, "You are not authorized to use this command.")

@bot.message_handler(func=lambda message: message.from_user.id in operation_state)
def handle_media(message):
    user_id = operation_state.pop(message.from_user.id)
    
    try:
        # Create the inline button
        markup = types.InlineKeyboardMarkup()
        button = types.InlineKeyboardButton("Reply to Owner", callback_data=f"reply_{message.from_user.id}")
        markup.add(button)
        
        if message.text:
            bot.send_message(user_id, message.text, reply_markup=markup)
        elif message.photo:
            bot.send_photo(user_id, message.photo[-1].file_id, reply_markup=markup)
        elif message.document:
            bot.send_document(user_id, message.document.file_id, reply_markup=markup)
        elif message.audio:
            bot.send_audio(user_id, message.audio.file_id, reply_markup=markup)
        elif message.video:
            bot.send_video(user_id, message.video.file_id, reply_markup=markup)
        else:
            bot.reply_to(message, "Unsupported message type.")
            return
        
        bot.reply_to(message, "Message sent successfully!")
    
    except Exception as e:
        bot.reply_to(message, f"An error occurred: {str(e)}")

@bot.callback_query_handler(func=lambda call: call.data.startswith('reply_'))
def handle_callback_query(call):
    user_id = call.from_user.id
    owner_id = int(call.data.split('_')[1])
    
    # Prompt the user to send their reply
    bot.send_message(user_id, "Please send your reply to the owner.")
    
    # Store the state to handle the reply
    operation_state[user_id] = owner_id

@bot.message_handler(func=lambda message: message.from_user.id in operation_state)
def handle_user_reply(message):
    owner_id = operation_state.pop(message.from_user.id)
    
    try:
        # Forward the user's message to the owner
        if message.text:
            bot.send_message(owner_id, f"Reply from user {message.from_user.id}: {message.text}")
        elif message.photo:
            bot.forward_message(owner_id, message.chat.id, message.message_id)
        elif message.document:
            bot.forward_message(owner_id, message.chat.id, message.message_id)
        elif message.audio:
            bot.forward_message(owner_id, message.chat.id, message.message_id)
        elif message.video:
            bot.forward_message(owner_id, message.chat.id, message.message_id)
        else:
            bot.reply_to(message, "Unsupported message type.")
            return
        
        bot.reply_to(message, "Your reply has been sent to the owner!")
    
    except Exception as e:
        bot.reply_to(message, f"An error occurred: {str(e)}")

@bot.message_handler(commands=['support'])
def handle_support_request(message: Message):
    user_id = message.from_user.id
    # Prompt the user to send their message to the support team
    bot.send_message(user_id, "Please send your message to the support team.")
    # Store the state to handle the reply
    operation_state[user_id] = owner_id

@bot.message_handler(func=lambda message: message.from_user.id in operation_state)
def handle_user_reply(message: Message):
    user_id = message.from_user.id
    recipient_id = operation_state.pop(user_id)

    try:
        # Forward the user's message to the owner
        if message.text:
            bot.send_message(recipient_id, f"Reply from user {user_id}: {message.text}")
        elif message.photo:
            bot.forward_message(recipient_id, message.chat.id, message.message_id)
        elif message.document:
            bot.forward_message(recipient_id, message.chat.id, message.message_id)
        elif message.audio:
            bot.forward_message(recipient_id, message.chat.id, message.message_id)
        elif message.video:
            bot.forward_message(recipient_id, message.chat.id, message.message_id)
        else:
            bot.reply_to(message, "Unsupported message type.")
            return

        bot.reply_to(message, "Your message has been sent to the support team!")

    except Exception as e:
        bot.reply_to(message, f"An error occurred: {str(e)}")


def check(id):
    for i in CHANNELS:
        check = bot.get_chat_member(i, id)
        if check.status != 'left':
            pass
        else:
            return False
    return True
bonus = {}

def menu(id):
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('🆔 Account','/help')
    keyboard.row('🙌🏻 Referrals', '🎁 Bonus', '💸 Withdraw')
    keyboard.row('⚙️ Set Wallet', '/support')
    bot.send_message(id, "*🏡 Home*", parse_mode="Markdown",
                     reply_markup=keyboard)

# Help Command
@bot.message_handler(commands=['help'])
def help_command(message):
    help_text = (
        "*📜 Help Menu:*\n"
        "/start - Start the bot and set up your account.\n"
        "/support- contact to admins directly.\n"
        "/help - check all command.\n"
        "🆔 Account - View your account details.\n"
        "🙌🏻 Referrals - Check your referrals and get your referral link.\n"
        "🎁 Bonus - Claim your daily bonus.\n"
        "💸 Withdraw - Request a withdrawal.\n"
        "⚙️ Set Wallet - Set your wallet address.\n"
        "📊 Statistics - View bot statistics.\n"
        "If you need further assistance, please contact the admin."
    )
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")

# Broadcast Command for Admins
@bot.message_handler(commands=['broadcast'])
def broadcast(message):
    if message.chat.id != OWNER_ID:
        bot.reply_to(message, "You are not authorized to use this command.")
        return

    # Check if the message is a reply to another message
    if not message.reply_to_message:
        bot.reply_to(message, "Please reply to a message with the content you want to broadcast.")
        return

    message_to_broadcast = message.reply_to_message

    # Load user data
    try:
        with open('users.json', 'r') as file:
            data = json.load(file)
            logging.info(f"Loaded user data: {data}")
    except FileNotFoundError:
        bot.reply_to(message, "User data file not found.")
        logging.error("User data file not found.")
        return
    except json.JSONDecodeError:
        bot.reply_to(message, "Error decoding user data.")
        logging.error("Error decoding user data.")
        return

    # Iterate over user IDs and send the broadcast message
    for user_id in data.get('balance', {}).keys():
        try:
            if message_to_broadcast.text:
                bot.send_message(user_id, message_to_broadcast.text, parse_mode="Markdown")
            elif message_to_broadcast.photo:
                bot.send_photo(user_id, message_to_broadcast.photo[-1].file_id, caption=message_to_broadcast.caption)
            elif message_to_broadcast.video:
                bot.send_video(user_id, message_to_broadcast.video.file_id, caption=message_to_broadcast.caption)
            elif message_to_broadcast.animation:
                bot.send_animation(user_id, message_to_broadcast.animation.file_id, caption=message_to_broadcast.caption)
            elif message_to_broadcast.document:
                bot.send_document(user_id, message_to_broadcast.document.file_id, caption=message_to_broadcast.caption)
            elif message_to_broadcast.audio:
                bot.send_audio(user_id, message_to_broadcast.audio.file_id, caption=message_to_broadcast.caption)
            elif message_to_broadcast.sticker:
                bot.send_sticker(user_id, message_to_broadcast.sticker.file_id)
            elif message_to_broadcast.video_note:
                bot.send_video_note(user_id, message_to_broadcast.video_note.file_id)
            else:
                bot.send_message(user_id, "Unsupported message type.")
                logging.warning(f"Unsupported message type for user {user_id}")
            logging.info(f"Message sent successfully to user: {user_id}")
        except Exception as e:
            logging.error(f"Failed to send broadcast message to user {user_id}: {e}")

    bot.reply_to(message, "Broadcast message sent to all users.")
    logging.info("Broadcast completed.")
    # Admin Panel Command
@bot.message_handler(commands=['admin'])

def admin_panel(message):
    if message.chat.id != OWNER_ID:
        bot.reply_to(message, "You are not authorized to use this command.")
        return
    
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('📈 Stats', '📢 Broadcast', '🔙 Back')
    bot.send_message(message.chat.id, "Welcome to the Admin Panel.", reply_markup=keyboard)

@bot.message_handler(func=lambda message: message.text == '📈 Stats')

def show_stats(message):
    if message.chat.id != OWNER_ID:
        return
    
    data = json.load(open('users.json', 'r'))
    total_users = data.get('total', 0)
    total_withdrawn = data.get('totalwith', 0)
    msg = f"*📊 Total members: {total_users}\nTotal withdrawn: {total_withdrawn} {TOKEN}*"
    bot.send_message(message.chat.id, msg, parse_mode="Markdown")

@bot.message_handler(func=lambda message: message.text == '🔙 Back')



def back_to_menu(message):
    if message.chat.id != OWNER_ID:
        return
    
    bot.send_message(message.chat.id, "Returning to the main menu.")
    

@bot.message_handler(commands=['start'])
def start(message):
   try:
    user = message.chat.id
    msg = message.text
    if msg == '/start':
        user = str(user)
        data = json.load(open('users.json', 'r'))
        if user not in data['referred']:
            data['referred'][user] = 0
            data['total'] = data['total'] + 1
        if user not in data['referby']:
            data['referby'][user] = user
        if user not in data['checkin']:
            data['checkin'][user] = 0
        if user not in data['DailyQuiz']:
            data['DailyQuiz'][user] = "0"
        if user not in data['balance']:
            data['balance'][user] = 0
        if user not in data['wallet']:
            data['wallet'][user] = "none"
        if user not in data['withd']:
            data['withd'][user] = 0
        if user not in data['id']:
            data['id'][user] = data['total']+1
        json.dump(data, open('users.json', 'w'))
        print(data)
        markup = telebot.types.InlineKeyboardMarkup()
        markup.add(telebot.types.InlineKeyboardButton(
           text=' ✅ Verify', callback_data='check'))
       
   
        
        msg_start = "*Join Channel to proof \n You are not a🤖ROBOT\n Hello sir You can earn through Using simple refer🔗 - "
        for i in CHANNELS:
            msg_start += f"\n➡️ {i}\n"
        msg_start += "*"
        bot.send_message(user, msg_start,
                         parse_mode="Markdown", reply_markup=markup)
    else:

        data = json.load(open('users.json', 'r'))
        user = message.chat.id
        user = str(user)
        refid = message.text.split()[1]
        if user not in data['referred']:
            data['referred'][user] = 0
            data['total'] = data['total'] + 1
        if user not in data['referby']:
            data['referby'][user] = refid
        if user not in data['checkin']:
            data['checkin'][user] = 0
        if user not in data['DailyQuiz']:
            data['DailyQuiz'][user] = 0
        if user not in data['balance']:
            data['balance'][user] = 0
        if user not in data['wallet']:
            data['wallet'][user] = "none"
        if user not in data['withd']:
            data['withd'][user] = 0
        if user not in data['id']:
            data['id'][user] = data['total']+1
        json.dump(data, open('users.json', 'w'))
        print(data)
        markups = telebot.types.InlineKeyboardMarkup()
        markups.add(telebot.types.InlineKeyboardButton(
            text=' ✅ Verify', callback_data='check'))
        msg_start = "*Join Channel to proof \n You are not a🤖ROBOT\n Hello sir You can earn through Using simple refer🔗 - \n➡️ @bigmumbai_goagame_91club*"
        bot.send_message(user, msg_start,
                         parse_mode="Markdown", reply_markup=markups)
   except:
        bot.send_message(message.chat.id, "This command having error pls wait for ficing the glitch by admin")
        bot.send_message(OWNER_ID, "Your bot got an error fix it fast!\n Error on command: "+message.text)
        return

@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
   try:
    ch = check(call.message.chat.id)
    if call.data == 'check':
        if ch == True:
            data = json.load(open('users.json', 'r'))
            user_id = call.message.chat.id
            user = str(user_id)
            bot.answer_callback_query(
                callback_query_id=call.id, text='✅ You ✅ Verify Now yu can earn money')
            bot.delete_message(call.message.chat.id, call.message.message_id)
            if user not in data['refer']:
                data['refer'][user] = True

                if user not in data['referby']:
                    data['referby'][user] = user
                    json.dump(data, open('users.json', 'w'))
                if int(data['referby'][user]) != user_id:
                    ref_id = data['referby'][user]
                    ref = str(ref_id)
                    if ref not in data['balance']:
                        data['balance'][ref] = 0
                    if ref not in data['referred']:
                        data['referred'][ref] = 0
                    json.dump(data, open('users.json', 'w'))
                    data['balance'][ref] += Per_Refer
                    data['referred'][ref] += 1
                    bot.send_message(
                        ref_id, f"*🏧 New Referral on Level 1, You Got : +{Per_Refer} {TOKEN}*", parse_mode="Markdown")
                    json.dump(data, open('users.json', 'w'))
                    return menu(call.message.chat.id)

                else:
                    json.dump(data, open('users.json', 'w'))
                    return menu(call.message.chat.id)

            else:
                json.dump(data, open('users.json', 'w'))
                menu(call.message.chat.id)

        else:
            bot.answer_callback_query(
                callback_query_id=call.id, text='❌ You not ✅ Verify')
            bot.delete_message(call.message.chat.id, call.message.message_id)
            markup = telebot.types.InlineKeyboardMarkup()
            markup.add(telebot.types.InlineKeyboardButton(
                text=' ✅ Verify', callback_data='check'))
            msg_start = "*Join Channel to proof \n You are not a🤖ROBOT\n Hello sir You can earn through Using simple refer🔗 - \n➡️ @bigmumbai_goagame_91club*"
            bot.send_message(call.message.chat.id, msg_start,
                             parse_mode="Markdown", reply_markup=markup)
   except:
        bot.send_message(call.message.chat.id, "This command having error pls wait for ficing the glitch by admin")
        bot.send_message(OWNER_ID, "Your bot got an error fix it fast!\n Error on command: "+call.data)
        return

@bot.message_handler(content_types=['text'])
def send_text(message):
   try:
    if message.text == '🆔 Account':
        data = json.load(open('users.json', 'r'))
        accmsg = '*👮 User : {}\n\n⚙️ Wallet : *`{}`*\n\n💸 Balance : *`{}`* {}*'
        user_id = message.chat.id
        user = str(user_id)

        if user not in data['balance']:
            data['balance'][user] = 0
        if user not in data['wallet']:
            data['wallet'][user] = "none"

        json.dump(data, open('users.json', 'w'))

        balance = data['balance'][user]
        wallet = data['wallet'][user]
        msg = accmsg.format(message.from_user.first_name,
                            wallet, balance, TOKEN)
        bot.send_message(message.chat.id, msg, parse_mode="Markdown")
    if message.text == '🙌🏻 Referrals':
        data = json.load(open('users.json', 'r'))
        ref_msg = "*⏯️ Total Invites : {} Users\n\n👥 Refferrals System\n\n1 Level:\n🥇 Level°1 - {} {}\n\n🔗 Referral Link ⬇️\n{}*"

        bot_name = bot.get_me().username
        user_id = message.chat.id
        user = str(user_id)

        if user not in data['referred']:
            data['referred'][user] = 0
        json.dump(data, open('users.json', 'w'))

        ref_count = data['referred'][user]
        ref_link = 'https://telegram.me/{}?start={}'.format(
            bot_name, message.chat.id)
        msg = ref_msg.format(ref_count, Per_Refer, TOKEN, ref_link)
        bot.send_message(message.chat.id, msg, parse_mode="Markdown")
    if message.text == "⚙️ Set Wallet":
        user_id = message.chat.id
        user = str(user_id)

        keyboard = telebot.types.ReplyKeyboardMarkup(True)
        keyboard.row('🚫 Cancel')
        send = bot.send_message(message.chat.id, "_⚠️Send Your Upi ID \n ✔️Please Enter Valid UPI ID  \n 😓Otherwise You will lose Your Fund._",
                                parse_mode="Markdown", reply_markup=keyboard)
        # Next message will call the name_handler function
        bot.register_next_step_handler(message, upi_address)
    if message.text == "🎁 Bonus":
        user_id = message.chat.id
        user = str(user_id)
        cur_time = int((time.time()))
        data = json.load(open('users.json', 'r'))
        #bot.send_message(user_id, "*🎁 Bonus Button is Under Maintainance*", parse_mode="Markdown")
        if (user_id not in bonus.keys()) or (cur_time - bonus[user_id] > 60*60*24):
            data['balance'][(user)] += Daily_bonus
            bot.send_message(
                user_id, f"Congrats you just received {Daily_bonus} {TOKEN}")
            bonus[user_id] = cur_time
            json.dump(data, open('users.json', 'w'))
        else:
            bot.send_message(
                message.chat.id, "❌*You can only take bonus once every 24 hours!*",parse_mode="markdown")
        return

    if message.text == "📊Statistics":
        user_id = message.chat.id
        user = str(user_id)
        data = json.load(open('users.json', 'r'))
        msg = "*📊 Total members : {} Users\n\n🥊 Total successful Withdraw : {} {}*"
        msg = msg.format(data['total'], data['totalwith'], TOKEN)
        bot.send_message(user_id, msg, parse_mode="Markdown")
        return

    if message.text == "💸 Withdraw":
        user_id = message.chat.id
        user = str(user_id)

        data = json.load(open('users.json', 'r'))
        if user not in data['balance']:
            data['balance'][user] = 0
        if user not in data['wallet']:
            data['wallet'][user] = "none"
        json.dump(data, open('users.json', 'w'))

        bal = data['balance'][user]
        wall = data['wallet'][user]
        if wall == "none":
            bot.send_message(user_id, "_❌ wallet Not set_",
                             parse_mode="Markdown")
            return
        if bal >= Mini_Withdraw:
            bot.send_message(user_id, "_Enter Your Amount_",
                             parse_mode="Markdown")
            bot.register_next_step_handler(message, amo_with)
        else:
            bot.send_message(
                user_id, f"_❌Your balance low you should have at least {Mini_Withdraw} {TOKEN} to Withdraw_", parse_mode="Markdown")
            return
   except:
        bot.send_message(message.chat.id, "This command having error pls wait for ficing the glitch by admin")
        bot.send_message(OWNER_ID, "Your bot got an error fix it fast!\n Error on command: "+message.text)
        return

def upi_address(message):
    if message.text == "🚫 Cancel":
        return menu(message.chat.id)
    
    upi_id = message.text.strip()
    if '@' in upi_id:  # Basic validation for UPI ID
        user_id = message.chat.id
        data = json.load(open('users.json', 'r'))
        data['wallet'][str(user_id)] = upi_id

        bot.send_message(message.chat.id, f"*💹 Your UPI ID has been set to {upi_id}*", parse_mode="Markdown")
        json.dump(data, open('users.json', 'w'))
        return menu(message.chat.id)
    else:
        bot.send_message(message.chat.id, "*⚠️ Invalid UPI ID! Please provide a valid UPI ID.*", parse_mode="Markdown")
        return menu(message.chat.id)

# Update command handler for setting wallet
@bot.message_handler(text="⚙️ Set Wallet")
def set_wallet(message):
    user_id = message.chat.id
    keyboard = telebot.types.ReplyKeyboardMarkup(True)
    keyboard.row('🚫 Cancel')
    send = bot.send_message(message.chat.id, "_⚠️ Send Your Upi ID \n ✔️Please Enter Valid UPI ID  \n 😓Otherwise You will lose Your Fund._", parse_mode="Markdown", reply_markup=keyboard)
    bot.register_next_step_handler(message, upi_address)


def amo_with(message):
   try:
    user_id = message.chat.id
    amo = message.text
    user = str(user_id)
    data = json.load(open('users.json', 'r'))
    if user not in data['balance']:
        data['balance'][user] = 0
    if user not in data['wallet']:
        data['wallet'][user] = "none"
    json.dump(data, open('users.json', 'w'))

    bal = data['balance'][user]
    wall = data['wallet'][user]
    msg = message.text
    if msg.isdigit() == False:
        bot.send_message(
            user_id, "_📛 Invaild value. Enter only numeric value. Try again_", parse_mode="Markdown")
        return
    if int(message.text) < Mini_Withdraw:
        bot.send_message(
            user_id, f"_❌ Minimum withdraw {Mini_Withdraw} {TOKEN}_", parse_mode="Markdown")
        return
    if int(message.text) > bal:
        bot.send_message(
            user_id, "_❌ You Can't withdraw More than Your Balance_", parse_mode="Markdown")
        return
    amo = int(amo)
    data['balance'][user] -= int(amo)
    data['totalwith'] += int(amo)
    bot_name = bot.get_me().username
    json.dump(data, open('users.json', 'w'))
    bot.send_message(user_id, "✅* Withdraw is request to our owner automatically\n\n💹 Payment Channel :- "+PAYMENT_CHANNEL +"*", parse_mode="Markdown")

    markupp = telebot.types.InlineKeyboardMarkup()
    markupp.add(telebot.types.InlineKeyboardButton(text='🍀 BOT LINK', url=f'https://telegram.me/{bot_name}?start={OWNER_ID}'))
    send = bot.send_message(PAYMENT_CHANNEL,  "✅* New Withdraw\n\n⭐ Amount - "+str(amo)+f" {TOKEN}\n🦁 User - @"+message.from_user.username+"\n💠 Wallet* - `"+data['wallet'][user]+"`\n☎️ *User Referrals = "+str(
        data['referred'][user])+"\n\n🏖 Bot Link - @"+bot_name+"\n⏩ Please wait our owner will confrim it*", parse_mode="Markdown", disable_web_page_preview=True, reply_markup=markupp)


    
    send = bot.send_message(
    OWNER_ID,
    "✅* New Withdraw\n\n⭐ Amount - " + str(amo) + f" {TOKEN}\n🦁 User - @"+message.from_user.username+"\n🦁 Userid - @" + str(message.from_user.id) + "\n💠 Wallet* - `" + data['wallet'][user] + "`\n☎️ *User Referrals = " + str(data['referred'][user]) + "\n\n🏖 Bot Link - @" + bot_name + "\n⏩ Please wait our owner will confirm it*",
    parse_mode="Markdown",
    disable_web_page_preview=True,
    reply_markup=markupp
)
   
   
   except:
        bot.send_message(message.chat.id, "This command having error pls wait for ficing the glitch by admin")
        bot.send_message(OWNER_ID, "Your bot got an error fix it fast!\n Error on command: "+message.text)
        return

if __name__ == '__main__':
    bot.polling(none_stop=True)
    bot.polling()
